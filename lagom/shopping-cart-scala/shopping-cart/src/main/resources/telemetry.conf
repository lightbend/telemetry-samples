# Forming a cluster is not necessary since we only want to demonstrate 
# how to use Lightbend Telemetry with Lagom.
lagom.cluster.join-self = true
lagom.cluster.bootstrap.enabled = false

# Lagom does not supports Lightbend Telemetry in DEV mode, and running in production
# requires the following configuration is set. See more details at the following page:
# https://www.playframework.com/documentation/2.8.x/ApplicationSecret
play.http.secret.key = "6ZjhgTPR0JU8aRYpXkqx6DXIw1F7qZBnEvY89qh8ELGABuntR00qSeixhZNELNlP"
play.http.secret.key = ${?APPLICATION_SECRET}

# We are also using a local Kafka broker, so we disable the service locator query
# and the default will be used.
lagom.broker.kafka.service-name = ""
lagom.broker.kafka.service-name = ${?KAFKA_SERVICE_NAME}

# Finally, the Lightbend Telemetry configurations. See more at:
# https://developer.lightbend.com/docs/telemetry/current/instrumentations/lagom/lagom.html
cinnamon {

  application = "shopping-cart-lagom"

  chmetrics.reporters += "console-reporter"

  #
  # Uncomment if you use Prometheus as a backend.
  # See https://developer.lightbend.com/docs/telemetry/current/sandbox/prometheus-sandbox.html
  #
  # prometheus.exporters += http-server

  lagom.http {
    servers {
      "*:*" {
        paths {
          "*" {
            metrics = on
          }
        }
      }
    }
    clients {
      "*:*" {
        paths {
          "*" {
            metrics = on
          }
        }
      }
    }
  }


  #
  # In general, the settings recommended to produce metrics for  actors in Lagom applications should
  # be enough. As indicated in https://developer.lightbend.com/docs/telemetry/current/getting-started/lagom_java.html
  # these settings are:
  #
  #  akka.actors {
  #     default-by-class {
  #      includes = "/user/*"
  #      report-by = class
  #      excludes = ["akka.http.*", "akka.stream.*"]
  #    }
  #  }
  #
  # But you can also fine tune the actors telemetry to produce fewer data and report it in a more
  # meaningful format (e.g. grouping). For example, this sample application uses a single persistent
  # entity that's sharded. It also has two projections (a read side processor and a topic producer). So
  # we can limit the actors telemetry to these types of actors:
  #
  akka.actors {
    "sharded-group" {
      report-by = group
      includes = ["/system/sharding/ShoppingCart/*"]
      excludes = ["akka.cluster.sharding.Shard"]
    }
    "com.lightbend.lagom.internal.scaladsl.persistence.ReadSideActor" {
      report-by = group
    }
    "com.lightbend.lagom.internal.broker.kafka.TopicProducerActor" {
      report-by = group
    }
  }
}
